#ifndef AP_XFOIL_H
#define AP_XFOIL_H

#include <string>

namespace ap {

void DelFile(std::string File);

//! Class to run Xfoil operations through pipe from the program code
class XFOIL
{
	public:
	
	double T 		= 0;
	double T_x		= 0;
	double F 		= 0;
	double F_x		= 0;
	
	double xHinge 	= 0.8;
	double yHinge	= 0.5;
	double flapAngle = 0;
	
	double gap		= 0;
	double gapBlend = 0.9;
	
	double foilMix	= 0.5;

	int	   PparN 	= 160;       
	double PparP 	= 0.8; //1.0 
	double PparT 	= 0.8; //0.15
	double PparR 	= 0.1; //0.2 
	
	double filt		= 1;
	int    Ncrit	= 9;
	double vacc		= 0.001;
	
	double Re		= 200000;
	double Ma		= 0;
	int	   XfoilIter = 40;

	std::string global_pipe_command = "Xfoil > Xfoil.log";
	std::string XfoilLogFile;
	std::string airfoil;
	
	//Data
	
	double Alfa, CL, CD, CDp, CM, Top_Xtr, Bot_Xtr;

	//! Default constructor
	XFOIL() = default;

	//! Prints out currently set parameters
	/*! \param out - output stream */
	void	PrintParams(std::ostream &out);

	//! Creates airfoil from the NACA family 
	/*!
 	 * \param airfoil_in - NACA with 4 or 5 digit number, eg.: NACA 23012
	 * \param airfoil_out - output file of the created airfoil
 	 * \param pipe_command - custom pipe command to run the task, if not defined by default global_pipe_command is executed: Xfoil > Xfoil.log
 	 * \return 0 on success.
	 */
	int 	MakeAirfoil(std::string airfoil_in, std::string airfoil_out, std::string pipe_command="");

	//! Makes proportional mixing from the two input airfoils 
	/*!
 	 * \param airfoil_in1 - input file of the first airfoil
 	 * \param airfoil_in2 - input file of the second airfoil
	 * \param airfoil_out - output file of the created airfoil
 	 * \param pipe_command - custom pipe command to run the task, if not defined by default global_pipe_command is executed: Xfoil > Xfoil.log
 	 * \return 0 on success.
	 */
	int 	Mixing(std::string airfoil_in1, std::string airfoil_in2, std::string airfoil_out, std::string pipe_command="");

	//! Modifies airfoil according to the currently set parameters
	/*!
 	 * \param airfoil_in - input file of airfoil
	 * \param airfoil_out - output file of the modified airfoil
 	 * \param pipe_command - custom pipe command to run the task, if not defined by default global_pipe_command is executed: Xfoil > Xfoil.log
 	 * \return 0 on success.
	 * \sa PrintParamiters() according to which the airfoil is modified.
	 */
	int 	ModifyAirfoil(std::string airfoil_in, std::string airfoil_out, std::string pipe_command="");

	//! Set Flap on the airfoil
	/*!
 	 * \param airfoil_in - input file of airfoil
	 * \param airfoil_out - output file of the airfoil with deflected flap, flap is defined by the currently set parameters
 	 * \param pipe_command - custom pipe command to run the task, if not defined by default global_pipe_command is executed: Xfoil > Xfoil.log
 	 * \return 0 on success.
	 * \sa PrintParamiters() according to which the airfoil flap is defined.
	 */
	int		Flap(std::string airfoil_in, std::string airfoil_out, std::string pipe_command="");

	//! Run analysis of the airfoil
	/*!
 	 * \param flowFlag - indicates if the airfoil is analyzed for specified angle of attack, or lift coefficient
	 * - a - Angle of Attack
	 * - c - Lift Coefficient
	 * \param flow - value of the angle of attack, or lift coefficient, according to the flowFlag set
 	 * \param airfoil_in - input file of airfoil with prefix:
	 * - NACA - to generate airfoil for analysis eg.: NACA 23012
	 * - LOAD - to load from file airfoil for analysis eg.: LOAD filepath
	 * \param aero_dat - output file with the aerodynami coefficients
 	 * \param pipe_command - custom pipe command to run the task, if not defined by default global_pipe_command is executed: Xfoil > Xfoil.log
 	 * \return 0 on success.
	 */
	int		Analyz(bool flowFlag, double flow, std::string airfoil_in, std::string aero_dat, std::string pipe_command="");

	//! Checks convergence of the analysis
	/*!
 	 * \param log_file - Xfoil log file generated by pipe
	 * \param err_nr - number of errors, which occured 
 	 * \param errors - string of errors from the Xfoil log file
 	 * \return 0 on success.
	 */
	int		Convergence(std::string log_file, int &err_nr, std::string &errors);

	//! Gets aerodynamic coefficients values from the results file
	/*!
 	 * \param aero_dat - analysis results file
 	 * \return 0 on success.
	 */
	int  	GetData(std::string aero_dat);
	
	private:
	
	void	pPpar(FILE *pXfoil);
	void 	pGap(FILE *pXfoil);
};

} // namespace ap

#endif
